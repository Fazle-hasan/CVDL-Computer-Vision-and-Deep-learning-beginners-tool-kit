{"cells":[{"cell_type":"markdown","metadata":{"id":"wdr2EHAbPpII"},"source":["\n","\n","#Practical No.: 02\n","Aim :- Implementation of feature selection techniques."]},{"cell_type":"code","execution_count":1,"metadata":{"id":"iOgUYy3Nlt4D","executionInfo":{"status":"ok","timestamp":1648358746183,"user_tz":-330,"elapsed":13,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}}},"outputs":[],"source":["#Importing the libraries# load libraries\n","from sklearn.datasets import load_iris\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline"]},{"cell_type":"markdown","metadata":{"id":"uHVh0gXgP80L"},"source":["#Chi-square Test \n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iKTDKRIA-JWE","executionInfo":{"status":"ok","timestamp":1648358746184,"user_tz":-330,"elapsed":12,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"b0ca8280-cda4-45a0-df4b-1e140625900a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(150, 4)"]},"metadata":{},"execution_count":2}],"source":["\n","# Load Data\n","# load iris data\n","iris = load_iris()\n","\n","# create features and target\n","X = iris.data\n","y = iris.target\n","\n","# convert to categorical data by converting data to integers\n","X = X.astype(int)\n","X.shape"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"4GnQlZ61-fEf","executionInfo":{"status":"ok","timestamp":1648358746778,"user_tz":-330,"elapsed":602,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}}},"outputs":[],"source":["# importing chi_square\n","from sklearn.feature_selection import SelectKBest, chi2\n","# Compare Chi-Squared Statistics\n","# select two features with highest chi-squared statistics\n","chi2_selector = SelectKBest(chi2, k=2)\n","X_kbest = chi2_selector.fit_transform(X, y)"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DRyDaaCA-jjB","executionInfo":{"status":"ok","timestamp":1648358746779,"user_tz":-330,"elapsed":33,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"1b293ceb-c86d-456d-a9ca-2b4c3d50b4d2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original number of features: 4\n","Reduced number of features: 2\n"]}],"source":["print('Original number of features:', X.shape[1])\n","print('Reduced number of features:', X_kbest.shape[1])"]},{"cell_type":"markdown","metadata":{"id":"3d91RHU8-pOe"},"source":["#Fisher’s Score"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OId0Z1XxC-jH","executionInfo":{"status":"ok","timestamp":1648358746780,"user_tz":-330,"elapsed":31,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"0d76a876-4f9a-4bdf-892c-490bd8af43e1"},"outputs":[{"output_type":"stream","name":"stdout","text":["     0  1  2  3\n","0    5  3  1  0\n","1    4  3  1  0\n","2    4  3  1  0\n","3    4  3  1  0\n","4    5  3  1  0\n","..  .. .. .. ..\n","145  6  3  5  2\n","146  6  2  5  1\n","147  6  3  5  2\n","148  6  3  5  2\n","149  5  3  5  1\n","\n","[150 rows x 4 columns]\n"]}],"source":["df = pd.DataFrame(X)\n","# View the data frame\n","print(df)"]},{"cell_type":"code","source":["pip install skfeature-chappers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s7c1xIDs1s5D","executionInfo":{"status":"ok","timestamp":1648358840682,"user_tz":-330,"elapsed":8085,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"cae0c557-990f-464d-cde2-2471dc0ca7dc"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting skfeature-chappers\n","  Downloading skfeature_chappers-1.1.0-py3-none-any.whl (66 kB)\n","\u001b[?25l\r\u001b[K     |█████                           | 10 kB 16.9 MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 20 kB 10.4 MB/s eta 0:00:01\r\u001b[K     |██████████████▉                 | 30 kB 8.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████▊            | 40 kB 7.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 51 kB 4.4 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 61 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 66 kB 2.5 MB/s \n","\u001b[?25hRequirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from skfeature-chappers) (1.3.5)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from skfeature-chappers) (1.21.5)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from skfeature-chappers) (1.0.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas->skfeature-chappers) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->skfeature-chappers) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->skfeature-chappers) (1.15.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->skfeature-chappers) (3.1.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->skfeature-chappers) (1.1.0)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->skfeature-chappers) (1.4.1)\n","Installing collected packages: skfeature-chappers\n","Successfully installed skfeature-chappers-1.1.0\n"]}]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"8plJ4nIp-3SS","executionInfo":{"status":"ok","timestamp":1648358859623,"user_tz":-330,"elapsed":948,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"b56b2d15-2532-4625-d70c-0ce16c1ab522"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["#from skfeature.funtion.similarity_based import fisher_score\n","from skfeature.function.similarity_based import fisher_score\n","\n","# Calculating scores\n","ranks = fisher_score.fisher_score(X, y)\n","# Plotting the ranks\n","feat_importances = pd.Series(ranks,df.columns[0:len(df.columns)])\n","\n","feat_importances.plot(kind = 'barh', color = 'teal')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Q8mEcIyDCzmF"},"source":["#Correlation Coefficient"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"PXC90dyNC428","executionInfo":{"status":"ok","timestamp":1648358875681,"user_tz":-330,"elapsed":479,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}}},"outputs":[],"source":["# Load iris data\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","iris = load_iris()\n","\n","# Create features and target\n","X = iris.data\n","y = iris.target"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J2c4tSymD4Gl","executionInfo":{"status":"ok","timestamp":1648358880021,"user_tz":-330,"elapsed":525,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"4c89e414-dcd7-4ff9-9079-ba4efc39eef2"},"outputs":[{"output_type":"stream","name":"stdout","text":["          0         1         2         3\n","0  1.000000 -0.127335  0.788346  0.693228\n","1 -0.127335  1.000000 -0.382160 -0.289575\n","2  0.788346 -0.382160  1.000000  0.908784\n","3  0.693228 -0.289575  0.908784  1.000000\n"]}],"source":["# Create correlation matrix\n","corr_matrix = df.corr()\n","print(corr_matrix)"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":392},"id":"u8_FYPGZErFL","executionInfo":{"status":"ok","timestamp":1648358884617,"user_tz":-330,"elapsed":8,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"71cfb7c8-f5b1-4193-ac07-25a3685a05a1"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 576x432 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Create correlation heatmap\n","plt.figure(figsize=(8,6))\n","plt.title('Correlation Heatmap of Iris Dataset')\n","a = sns.heatmap(corr_matrix, square=True, annot=True, fmt='.2f', linecolor='black')\n","a.set_xticklabels(a.get_xticklabels(), rotation=30)\n","a.set_yticklabels(a.get_yticklabels(), rotation=30)           \n","plt.show()   "]},{"cell_type":"markdown","metadata":{"id":"6jZ8Q1Lvnh7I"},"source":["# Forward Feature Selection"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"acmJ4JDGtbWb","executionInfo":{"status":"ok","timestamp":1648358890649,"user_tz":-330,"elapsed":746,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}}},"outputs":[],"source":["# step forward feature selection\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import r2_score\n","import joblib\n","import sys\n","sys.modules['sklearn.externals.joblib'] = joblib\n","from mlxtend.feature_selection import SequentialFeatureSelector as SFS"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":74},"id":"ksiDvtLHu0ab","executionInfo":{"status":"ok","timestamp":1648358919219,"user_tz":-330,"elapsed":25706,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"93503b55-5b7a-4baa-f312-9517edec9e83"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-8427b9e5-6302-4f6c-9976-ef942cb60bb0\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-8427b9e5-6302-4f6c-9976-ef942cb60bb0\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving train.csv to train.csv\n"]}],"source":["from google.colab import files\n","up = files.upload()"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"DAXtcuV5vErA","colab":{"base_uri":"https://localhost:8080/","height":299},"executionInfo":{"status":"ok","timestamp":1648358921888,"user_tz":-330,"elapsed":519,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"6f43641b-a145-4a67-de49-103fa47b337d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n","0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n","1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n","2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n","3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n","4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n","\n","  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n","0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n","1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n","2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n","3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n","4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n","\n","  YrSold  SaleType  SaleCondition  SalePrice  \n","0   2008        WD         Normal     208500  \n","1   2007        WD         Normal     181500  \n","2   2008        WD         Normal     223500  \n","3   2006        WD        Abnorml     140000  \n","4   2008        WD         Normal     250000  \n","\n","[5 rows x 81 columns]"],"text/html":["\n","  <div id=\"df-1cf7fd4a-ff33-4075-b5ec-8fcebd6c8661\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>MSSubClass</th>\n","      <th>MSZoning</th>\n","      <th>LotFrontage</th>\n","      <th>LotArea</th>\n","      <th>Street</th>\n","      <th>Alley</th>\n","      <th>LotShape</th>\n","      <th>LandContour</th>\n","      <th>Utilities</th>\n","      <th>...</th>\n","      <th>PoolArea</th>\n","      <th>PoolQC</th>\n","      <th>Fence</th>\n","      <th>MiscFeature</th>\n","      <th>MiscVal</th>\n","      <th>MoSold</th>\n","      <th>YrSold</th>\n","      <th>SaleType</th>\n","      <th>SaleCondition</th>\n","      <th>SalePrice</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>65.0</td>\n","      <td>8450</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>Reg</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2008</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","      <td>208500</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>20</td>\n","      <td>RL</td>\n","      <td>80.0</td>\n","      <td>9600</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>Reg</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>2007</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","      <td>181500</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>68.0</td>\n","      <td>11250</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>9</td>\n","      <td>2008</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","      <td>223500</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>70</td>\n","      <td>RL</td>\n","      <td>60.0</td>\n","      <td>9550</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2006</td>\n","      <td>WD</td>\n","      <td>Abnorml</td>\n","      <td>140000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>84.0</td>\n","      <td>14260</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>12</td>\n","      <td>2008</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","      <td>250000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 81 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1cf7fd4a-ff33-4075-b5ec-8fcebd6c8661')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1cf7fd4a-ff33-4075-b5ec-8fcebd6c8661 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1cf7fd4a-ff33-4075-b5ec-8fcebd6c8661');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}],"source":["# this is the data of house prediction\n","data = pd.read_csv(\"train.csv\")\n","data.head()"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"HWKnzvsqvPOZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648358926293,"user_tz":-330,"elapsed":5,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"b23b94dc-430c-4d00-de25-f7e96c0b8c31"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1460, 38)"]},"metadata":{},"execution_count":17}],"source":["# In practice, feature selection should be done after data pre-processing,\n","# so ideally, all the categorical variables are encoded into numbers,\n","# and then you can assess how deterministic they are of the target\n","\n","# here for simplicity I will use only numerical variables\n","# select numerical columns:\n","\n","numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n","numerical_vars = list(data.select_dtypes(include=numerics).columns)\n","data = data[numerical_vars]\n","data.shape"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"56gwnPqTwQTT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648358930382,"user_tz":-330,"elapsed":519,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"ecfefa40-43d8-4ba2-84f4-206a7cb96ec1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((1022, 37), (438, 37))"]},"metadata":{},"execution_count":18}],"source":["# separate train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(\n","    data.drop(labels=['SalePrice'], axis=1),\n","    data['SalePrice'],\n","    test_size=0.3,\n","    random_state=0)\n","\n","X_train.shape, X_test.shape"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"Vi0WQl3vwbMy","executionInfo":{"status":"ok","timestamp":1648358934372,"user_tz":-330,"elapsed":723,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}}},"outputs":[],"source":["# Filling the values \n","X_train.fillna(0, inplace=True)"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"kuiFwbgSwws7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648359025649,"user_tz":-330,"elapsed":87793,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"bc9c5e06-d65a-4c2c-e89a-f1c7747f1098"},"outputs":[{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.6s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  37 out of  37 | elapsed:   16.7s finished\n","\n","[2022-03-27 05:29:17] Features: 1/5 -- score: 0.6681341939841742[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.6s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  36 out of  36 | elapsed:   17.5s finished\n","\n","[2022-03-27 05:29:35] Features: 2/5 -- score: 0.7225461278367602[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.6s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  35 out of  35 | elapsed:   17.3s finished\n","\n","[2022-03-27 05:29:52] Features: 3/5 -- score: 0.7464490299764899[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.6s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  34 out of  34 | elapsed:   17.7s finished\n","\n","[2022-03-27 05:30:10] Features: 4/5 -- score: 0.768247161743703[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.6s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  33 out of  33 | elapsed:   18.1s finished\n","\n","[2022-03-27 05:30:28] Features: 5/5 -- score: 0.768725697509534"]}],"source":["from mlxtend.feature_selection import SequentialFeatureSelector as SFS\n","\n","sfs1 = SFS(RandomForestRegressor(), \n","           k_features=5, \n","           forward=True, \n","           floating=False, \n","           verbose=2,\n","           scoring='r2',\n","           cv=3)\n","\n","sfs1 = sfs1.fit(np.array(X_train), y_train)"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"p_Re8MPZxDRL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648359040479,"user_tz":-330,"elapsed":13,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"0e37e781-8d3e-4028-8151-033da1389fef"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4, 17, 19, 22, 26)"]},"metadata":{},"execution_count":21}],"source":["# This is the index of our feature\n","sfs1.k_feature_idx_"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"qLDelRuYxKUh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648359048456,"user_tz":-330,"elapsed":421,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"33e4282a-3197-42d9-fe63-298ba2410f81"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['OverallQual', 'BsmtFullBath', 'FullBath', 'KitchenAbvGr',\n","       'GarageCars'],\n","      dtype='object')"]},"metadata":{},"execution_count":22}],"source":["# These are the top 5 features for our data\n","X_train.columns[list(sfs1.k_feature_idx_)]"]},{"cell_type":"markdown","metadata":{"id":"RBsXsVNhxp40"},"source":["#Backward Feature Selection"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fDd9yu1SxoT-","outputId":"4cf9a8fb-aa60-42d3-d84f-19ae696176fb","executionInfo":{"status":"ok","timestamp":1648360237881,"user_tz":-330,"elapsed":1183561,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.3s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  37 out of  37 | elapsed:  1.4min finished\n","\n","[2022-03-27 05:32:24] Features: 36/5 -- score: 0.8527810507513731[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.2s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  36 out of  36 | elapsed:  1.3min finished\n","\n","[2022-03-27 05:33:43] Features: 35/5 -- score: 0.8555414581409696[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.2s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  35 out of  35 | elapsed:  1.3min finished\n","\n","[2022-03-27 05:34:59] Features: 34/5 -- score: 0.8546963142410772[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.2s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  34 out of  34 | elapsed:  1.2min finished\n","\n","[2022-03-27 05:36:12] Features: 33/5 -- score: 0.8562472368239593[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.1s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  33 out of  33 | elapsed:  1.2min finished\n","\n","[2022-03-27 05:37:21] Features: 32/5 -- score: 0.855704958103714[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.1s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  32 out of  32 | elapsed:  1.1min finished\n","\n","[2022-03-27 05:38:28] Features: 31/5 -- score: 0.857015001861743[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.0s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  31 out of  31 | elapsed:  1.0min finished\n","\n","[2022-03-27 05:39:29] Features: 30/5 -- score: 0.856823822733054[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.0s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  30 out of  30 | elapsed:   59.2s finished\n","\n","[2022-03-27 05:40:29] Features: 29/5 -- score: 0.8564953339427427[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.9s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  29 out of  29 | elapsed:   54.6s finished\n","\n","[2022-03-27 05:41:23] Features: 28/5 -- score: 0.8537768903383097[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.8s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  28 out of  28 | elapsed:   50.8s finished\n","\n","[2022-03-27 05:42:14] Features: 27/5 -- score: 0.8540464898387544[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.7s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  27 out of  27 | elapsed:   47.2s finished\n","\n","[2022-03-27 05:43:01] Features: 26/5 -- score: 0.8562268618418263[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.7s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  26 out of  26 | elapsed:   42.8s finished\n","\n","[2022-03-27 05:43:44] Features: 25/5 -- score: 0.8580186826448615[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.6s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  25 out of  25 | elapsed:   40.9s finished\n","\n","[2022-03-27 05:44:25] Features: 24/5 -- score: 0.8614357649787391[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.6s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  24 out of  24 | elapsed:   38.1s finished\n","\n","[2022-03-27 05:45:03] Features: 23/5 -- score: 0.8605361932626344[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.6s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  23 out of  23 | elapsed:   35.5s finished\n","\n","[2022-03-27 05:45:39] Features: 22/5 -- score: 0.8597800004331152[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.6s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  22 out of  22 | elapsed:   33.5s finished\n","\n","[2022-03-27 05:46:12] Features: 21/5 -- score: 0.8589678019363226[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.5s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  21 out of  21 | elapsed:   31.3s finished\n","\n","[2022-03-27 05:46:43] Features: 20/5 -- score: 0.8621246498474587[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.5s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  20 out of  20 | elapsed:   29.2s finished\n","\n","[2022-03-27 05:47:12] Features: 19/5 -- score: 0.8574006559742381[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.5s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  19 out of  19 | elapsed:   27.3s finished\n","\n","[2022-03-27 05:47:40] Features: 18/5 -- score: 0.8595608942675138[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.4s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  18 out of  18 | elapsed:   25.4s finished\n","\n","[2022-03-27 05:48:05] Features: 17/5 -- score: 0.8612242419670452[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.4s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  17 out of  17 | elapsed:   22.5s finished\n","\n","[2022-03-27 05:48:28] Features: 16/5 -- score: 0.8600346108119975[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.3s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  16 out of  16 | elapsed:   20.9s finished\n","\n","[2022-03-27 05:48:49] Features: 15/5 -- score: 0.8609805448582359[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.3s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  15 out of  15 | elapsed:   19.4s finished\n","\n","[2022-03-27 05:49:08] Features: 14/5 -- score: 0.8590190096577023[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.2s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  14 out of  14 | elapsed:   17.3s finished\n","\n","[2022-03-27 05:49:25] Features: 13/5 -- score: 0.8580321405712281[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.2s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  13 out of  13 | elapsed:   15.1s finished\n","\n","[2022-03-27 05:49:40] Features: 12/5 -- score: 0.855727188418029[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.1s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  12 out of  12 | elapsed:   13.5s finished\n","\n","[2022-03-27 05:49:54] Features: 11/5 -- score: 0.8571300024693697[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.1s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  11 out of  11 | elapsed:   11.7s finished\n","\n","[2022-03-27 05:50:05] Features: 10/5 -- score: 0.8545626388319657[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.0s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done  10 out of  10 | elapsed:    9.9s finished\n","\n","[2022-03-27 05:50:15] Features: 9/5 -- score: 0.8538066463253582[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.9s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done   9 out of   9 | elapsed:    8.1s finished\n","\n","[2022-03-27 05:50:23] Features: 8/5 -- score: 0.8455433712040042[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.9s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done   8 out of   8 | elapsed:    6.7s finished\n","\n","[2022-03-27 05:50:30] Features: 7/5 -- score: 0.8390299596108749[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.8s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done   7 out of   7 | elapsed:    5.7s finished\n","\n","[2022-03-27 05:50:36] Features: 6/5 -- score: 0.8333365197009677[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.7s remaining:    0.0s\n","[Parallel(n_jobs=1)]: Done   6 out of   6 | elapsed:    4.7s finished\n","\n","[2022-03-27 05:50:41] Features: 5/5 -- score: 0.8243299031779475"]}],"source":["# step backward feature elimination\n","sfs1 = SFS(RandomForestRegressor(), \n","           k_features=5, \n","           forward=False, \n","           floating=False, \n","           verbose=2,\n","           scoring='r2',\n","           cv=3)\n","\n","sfs1 = sfs1.fit(np.array(X_train), y_train)"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"qIhm7yaByL0S","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648360239311,"user_tz":-330,"elapsed":9,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"3d404bd7-8c6e-4204-c387-fdfb36abc5bf"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4, 5, 6, 9, 16)"]},"metadata":{},"execution_count":30}],"source":["sfs1.k_feature_idx_"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"RXmJi90uyUqN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648360239312,"user_tz":-330,"elapsed":8,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"8d819580-b4d8-4a8c-8071-c2ffc55c8024"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['OverallQual', 'OverallCond', 'YearBuilt', 'BsmtFinSF1', 'GrLivArea'], dtype='object')"]},"metadata":{},"execution_count":31}],"source":["X_train.columns[list(sfs1.k_feature_idx_)]"]},{"cell_type":"markdown","metadata":{"id":"dhvppRDPyY7N"},"source":["#LASSO Regularization (L1)\n"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"aISHTSXK40vi","executionInfo":{"status":"ok","timestamp":1648360237881,"user_tz":-330,"elapsed":23,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}}},"outputs":[],"source":["#Importing Library\n","from sklearn.linear_model import Lasso\n","from sklearn.feature_selection import SelectFromModel\n","from sklearn.preprocessing import StandardScaler"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"7UgIKpwSyX8n","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648360237883,"user_tz":-330,"elapsed":17,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"c08f348f-71a4-421a-a38b-c3395cdcfc9f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["StandardScaler()"]},"metadata":{},"execution_count":25}],"source":["# the features in the house dataset are in very\n","# different scales, so it helps the regression to scale them\n","\n","scaler = StandardScaler()\n","scaler.fit(X_train.fillna(0))"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"Z29uFbGy4-9D","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648360237884,"user_tz":-330,"elapsed":14,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"b03f1643-3aba-4597-90ca-137b83c63ce5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["SelectFromModel(estimator=Lasso(alpha=100))"]},"metadata":{},"execution_count":26}],"source":["# here, again I will train a Lasso Linear regression and select\n","# the non zero features in one line.\n","# bear in mind that the linear regression object from sklearn does\n","# not allow for regularisation. So If you want to make a regularised\n","# linear regression you need to import specifically \"Lasso\"\n","# that is the l1 version of the linear regression\n","# alpha is the penalisation here, so I set it high in order\n","# to force the algorithm to shrink some coefficients\n","\n","sel_ = SelectFromModel(Lasso(alpha=100))\n","sel_.fit(scaler.transform(X_train.fillna(0)), y_train)"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"ffc9rqyS5Fes","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648360237884,"user_tz":-330,"elapsed":11,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"fbd18179-a589-44bd-e8ba-6e218e20c615"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([False,  True,  True,  True,  True,  True,  True,  True,  True,\n","        True,  True, False,  True, False,  True,  True,  True,  True,\n","        True,  True,  True,  True,  True,  True,  True,  True,  True,\n","        True,  True,  True,  True,  True,  True,  True, False,  True,\n","        True])"]},"metadata":{},"execution_count":27}],"source":["sel_.get_support()"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"NpetzeDt5Kpm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648360237884,"user_tz":-330,"elapsed":9,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"618b3ccb-f132-45ba-81f7-1277e3797560"},"outputs":[{"output_type":"stream","name":"stdout","text":["total features: 37\n","selected features: 33\n","features with coefficients shrank to zero: 4\n","Total number neglected features =  4\n"]}],"source":["# make a list with the selected features and print the outputs\n","selected_feat = X_train.columns[(sel_.get_support())]\n","\n","print('total features: {}'.format((X_train.shape[1])))\n","print('selected features: {}'.format(len(selected_feat)))\n","print('features with coefficients shrank to zero: {}'.format(\n","    np.sum(sel_.estimator_.coef_ == 0)))\n","print(\"Total number neglected features = \",X_train.shape[1]-len(selected_feat))"]},{"cell_type":"markdown","metadata":{"id":"23WvY4jf6DGp"},"source":["#Random Forest Importance"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"nOPmjbbT5lvP","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1648360239310,"user_tz":-330,"elapsed":1433,"user":{"displayName":"Fazel Hasan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjzPcowCyew6f_Ue6Rauv5T1jQxd7DLhHBVzTtpuQ=s64","userId":"12561225706966741704"}},"outputId":"83e0d54f-c2a6-4cfd-bc71-8e25d95eb9fe"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb281fee850>"]},"metadata":{},"execution_count":29},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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Azt27GD37t3cdNNNjBs3jpEjR3LfffcBsGnTJj73uc9RX1/PmWeeyTPPPNPdl1bSIXJYj9BrbeXKlaxdu5Zjjz2WIUOGMH36dBYvXsyPfvQj7rrrLn74wx8CLdMmixcvZsOGDXz+859n/fr13HPPPUQEL774Ii+//DIXXXQRr7zyCtCyZO6qVas49thjWbRoEXfccUfrfwS7du3iySefpF+/fqxbt44rr7yydS31F154gTVr1vCpT32K8ePH8/vf/56Ghga+/OUv88gjjzBu3Di2b99O//79mTt3LscccwxLlizh/fffZ/z48Vx00UU89thjTJo0iVtuuYXdu3eza9eu2lxcSVVnoO/DuHHjWpfKPfXUU7nooosAGDFiROuIG+BLX/oSvXr1YujQoQwZMoSXX36ZZ599lpkzZwIwfPhwTj755NZAb7tkbntNTU1cf/31rFixgt69e7d+DUBDQ0PrWugf/Hq8Y445hgEDBjBu3DgAPvnJTwItS/GuWrWqdTGwbdu2sW7dOsaNG8c111xDU1MTX/jCF6ivr6/a9ZJUWwb6Phx55JGt73v16tW63atXL5qbm1vb2v/61M5+nWrbJXPbu/POOznhhBNYuXIle/bsoV+/fh3W07t37w/V0F5mctddd3W4RvvTTz/N448/zrRp0/jWt77lYl9SIZxDr4Jf/vKX7Nmzhw0bNvDqq68ybNgwzjvvvNYldV955RVef/31j6xzDh9danfbtm0MGDCAXr168dBDD7F79+59nnvYsGFs2rSJJUuWAC1L+jY3NzNp0iTuvfdempqaWmt45513eO211zjhhBP4+te/zvTp01m+fHm1LoOkGnOEXgWDBg2ioaGB7du3M2fOHPr168d1113Htddey4gRI+jTpw/z5s370Aj7AyNHjqR3796MGjWKadOmcd1113H55Zfz4IMPMnny5H2O5qFled9HHnmEmTNn8u6779K/f39++9vfMn36dDZu3MiYMWPITOrq6liwYAGLFi3i9ttvp2/fvhx11FE8+OCDh+qySOpmLp97kKZNm8Yll1zC1KlTa11K1fTEvwd9vLh8rsvnSlLRnHI5SPPmzat1CZIEOEKXpGIcdoFeqzl9tfD6Sz3XYRXo/fr1Y+vWrYZKjWQmW7du/dC975J6jsNqDn3gwIE0NjayefPmWpfysdWvX7/Wp1El9SyH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\n"},"metadata":{"needs_background":"light"}}],"source":["from sklearn.ensemble import RandomForestClassifier\n","#create the random forest with your hyperparameters\n","model = RandomForestClassifier(n_estimators = 340)\n","#fit the model to start training\n","model.fit(X, y)\n","#get the importance of the resulting features\n","importances = model.feature_importances_\n","#create a data frame for visualization\n","final_df = pd.DataFrame({\"Features\": pd.DataFrame(X).columns,\n","\"Importances\" : importances})\n","\n","final_df.set_index('Importances')\n","final_df = final_df.sort_values('Importances')\n","#plot the feature importances in bars\n","final_df.plot.bar(color = 'teal')"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"CVDL_Practical No_02.ipynb ","provenance":[],"authorship_tag":"ABX9TyMnKnwhiFmX6MDzV/vhFjzv"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}